import * as THREE from 'https://cdn.skypack.dev/three@0.128.0';
import { OrbitControls } from 'https://cdn.skypack.dev/three@0.128.0/examples/jsm/controls/OrbitControls.js';

export function createScene(canvas) {
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(0, 0, 15);

  const renderer = new THREE.WebGLRenderer({ canvas: canvas });
  renderer.setSize(window.innerWidth, window.innerHeight);

  const axesHelper = new THREE.AxesHelper(5);
  scene.add(axesHelper);

  const light = new THREE.PointLight(0xffffff, 1, 0);
  light.position.set(50, 50, 50);
  scene.add(light);

  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
  scene.add(ambientLight);

  const loader = new THREE.FontLoader();

  const tactics = [
    "Initial Access",
    "Execution",
    "Persistence",
    "Privilege Escalation",
    "Defense Evasion",
    "Credential Access",
    "Discovery",
    "Lateral Movement",
    "Collection",
    "Exfiltration",
    "Command and Control",
    "Impact"
  ];

  loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {
    tactics.forEach((tactic, index) => {
      const geometry = new THREE.TextGeometry(tactic, {
        font: font,
        size: 0.8,
        height: 0.2,
        curveSegments: 12,
        bevelEnabled: true,
        bevelThickness: 0.03,
        bevelSize: 0.02,
        bevelOffset: 0,
        bevelSegments: 5,
      });

      const material = new THREE.MeshPhongMaterial({ color: 0x00ff00 });

      const mesh = new THREE.Mesh(geometry, material);

      const angle = (2 * Math.PI) / tactics.length;
      const radius = 5;
      mesh.position.set(
        radius * Math.sin(index * angle),
        radius * Math.cos(index * angle),
        0
      );

      scene.add(mesh);
    });
  });

  const controls = new OrbitControls(camera, renderer.domElement);

  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
  }

  animate();
}
